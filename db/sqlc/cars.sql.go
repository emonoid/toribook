// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: cars.sql

package db

import (
	"context"
)

const createCar = `-- name: CreateCar :one
INSERT INTO cars (
  car_type, car_model, car_image
) VALUES (
  $1, $2, $3
)
RETURNING id, car_type, car_model, car_image, created_at
`

type CreateCarParams struct {
	CarType  string `json:"car_type"`
	CarModel string `json:"car_model"`
	CarImage string `json:"car_image"`
}

func (q *Queries) CreateCar(ctx context.Context, arg CreateCarParams) (Car, error) {
	row := q.db.QueryRowContext(ctx, createCar, arg.CarType, arg.CarModel, arg.CarImage)
	var i Car
	err := row.Scan(
		&i.ID,
		&i.CarType,
		&i.CarModel,
		&i.CarImage,
		&i.CreatedAt,
	)
	return i, err
}

const deleteCar = `-- name: DeleteCar :exec
DELETE FROM cars WHERE id = $1
`

func (q *Queries) DeleteCar(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCar, id)
	return err
}

const getCar = `-- name: GetCar :one
SELECT id, car_type, car_model, car_image, created_at FROM cars WHERE id = $1 LIMIT 1
`

// Cars
func (q *Queries) GetCar(ctx context.Context, id int64) (Car, error) {
	row := q.db.QueryRowContext(ctx, getCar, id)
	var i Car
	err := row.Scan(
		&i.ID,
		&i.CarType,
		&i.CarModel,
		&i.CarImage,
		&i.CreatedAt,
	)
	return i, err
}

const listCars = `-- name: ListCars :many
SELECT id, car_type, car_model, car_image, created_at FROM cars ORDER BY car_type
`

func (q *Queries) ListCars(ctx context.Context) ([]Car, error) {
	rows, err := q.db.QueryContext(ctx, listCars)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Car
	for rows.Next() {
		var i Car
		if err := rows.Scan(
			&i.ID,
			&i.CarType,
			&i.CarModel,
			&i.CarImage,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCar = `-- name: UpdateCar :exec
UPDATE cars
SET car_type = $2,
    car_model = $3,
    car_image = $4
WHERE id = $1
`

type UpdateCarParams struct {
	ID       int64  `json:"id"`
	CarType  string `json:"car_type"`
	CarModel string `json:"car_model"`
	CarImage string `json:"car_image"`
}

func (q *Queries) UpdateCar(ctx context.Context, arg UpdateCarParams) error {
	_, err := q.db.ExecContext(ctx, updateCar,
		arg.ID,
		arg.CarType,
		arg.CarModel,
		arg.CarImage,
	)
	return err
}
