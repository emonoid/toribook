// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: fares.sql

package db

import (
	"context"
)

const createFare = `-- name: CreateFare :one
INSERT INTO fares (
  base, per_km, per_min
) VALUES (
  $1, $2, $3
)
RETURNING id, base, per_km, per_min, created_at
`

type CreateFareParams struct {
	Base   int32 `json:"base"`
	PerKm  int32 `json:"per_km"`
	PerMin int32 `json:"per_min"`
}

func (q *Queries) CreateFare(ctx context.Context, arg CreateFareParams) (Fare, error) {
	row := q.db.QueryRowContext(ctx, createFare, arg.Base, arg.PerKm, arg.PerMin)
	var i Fare
	err := row.Scan(
		&i.ID,
		&i.Base,
		&i.PerKm,
		&i.PerMin,
		&i.CreatedAt,
	)
	return i, err
}

const deleteFare = `-- name: DeleteFare :exec
DELETE FROM fares WHERE id = $1
`

func (q *Queries) DeleteFare(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteFare, id)
	return err
}

const getFare = `-- name: GetFare :one
SELECT id, base, per_km, per_min, created_at FROM fares WHERE id = $1 LIMIT 1
`

// Fares
func (q *Queries) GetFare(ctx context.Context, id int64) (Fare, error) {
	row := q.db.QueryRowContext(ctx, getFare, id)
	var i Fare
	err := row.Scan(
		&i.ID,
		&i.Base,
		&i.PerKm,
		&i.PerMin,
		&i.CreatedAt,
	)
	return i, err
}

const listFares = `-- name: ListFares :many
SELECT id, base, per_km, per_min, created_at FROM fares ORDER BY id
`

func (q *Queries) ListFares(ctx context.Context) ([]Fare, error) {
	rows, err := q.db.QueryContext(ctx, listFares)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Fare
	for rows.Next() {
		var i Fare
		if err := rows.Scan(
			&i.ID,
			&i.Base,
			&i.PerKm,
			&i.PerMin,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFare = `-- name: UpdateFare :exec
UPDATE fares
SET base = $2,
    per_km = $3,
    per_min = $4
WHERE id = $1
`

type UpdateFareParams struct {
	ID     int64 `json:"id"`
	Base   int32 `json:"base"`
	PerKm  int32 `json:"per_km"`
	PerMin int32 `json:"per_min"`
}

func (q *Queries) UpdateFare(ctx context.Context, arg UpdateFareParams) error {
	_, err := q.db.ExecContext(ctx, updateFare,
		arg.ID,
		arg.Base,
		arg.PerKm,
		arg.PerMin,
	)
	return err
}
