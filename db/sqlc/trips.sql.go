// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: trips.sql

package db

import (
	"context"
	"database/sql"
)

const createTrip = `-- name: CreateTrip :one
INSERT INTO trips (
  booking_id, trip_status, pickup_location, pickup_lat, pickup_long, dropoff_location, dropoff_lat, dropoff_long, driver_id, driver_name, driver_mobile, car_id, car_type, car_image, fare
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15
)
RETURNING id, booking_id, trip_status, pickup_location, pickup_lat, pickup_long, dropoff_location, dropoff_lat, dropoff_long, driver_id, driver_name, driver_mobile, car_id, car_type, car_image, fare, created_at
`

type CreateTripParams struct {
	BookingID       string         `json:"booking_id"`
	TripStatus      string         `json:"trip_status"`
	PickupLocation  string         `json:"pickup_location"`
	PickupLat       string         `json:"pickup_lat"`
	PickupLong      string         `json:"pickup_long"`
	DropoffLocation string         `json:"dropoff_location"`
	DropoffLat      string         `json:"dropoff_lat"`
	DropoffLong     string         `json:"dropoff_long"`
	DriverID        sql.NullInt64  `json:"driver_id"`
	DriverName      sql.NullString `json:"driver_name"`
	DriverMobile    sql.NullString `json:"driver_mobile"`
	CarID           sql.NullInt64  `json:"car_id"`
	CarType         sql.NullString `json:"car_type"`
	CarImage        sql.NullString `json:"car_image"`
	Fare            sql.NullInt32  `json:"fare"`
}

func (q *Queries) CreateTrip(ctx context.Context, arg CreateTripParams) (Trip, error) {
	row := q.db.QueryRowContext(ctx, createTrip,
		arg.BookingID,
		arg.TripStatus,
		arg.PickupLocation,
		arg.PickupLat,
		arg.PickupLong,
		arg.DropoffLocation,
		arg.DropoffLat,
		arg.DropoffLong,
		arg.DriverID,
		arg.DriverName,
		arg.DriverMobile,
		arg.CarID,
		arg.CarType,
		arg.CarImage,
		arg.Fare,
	)
	var i Trip
	err := row.Scan(
		&i.ID,
		&i.BookingID,
		&i.TripStatus,
		&i.PickupLocation,
		&i.PickupLat,
		&i.PickupLong,
		&i.DropoffLocation,
		&i.DropoffLat,
		&i.DropoffLong,
		&i.DriverID,
		&i.DriverName,
		&i.DriverMobile,
		&i.CarID,
		&i.CarType,
		&i.CarImage,
		&i.Fare,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTrip = `-- name: DeleteTrip :exec
DELETE FROM trips WHERE id = $1
`

func (q *Queries) DeleteTrip(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTrip, id)
	return err
}

const getTrip = `-- name: GetTrip :one
SELECT id, booking_id, trip_status, pickup_location, pickup_lat, pickup_long, dropoff_location, dropoff_lat, dropoff_long, driver_id, driver_name, driver_mobile, car_id, car_type, car_image, fare, created_at FROM trips WHERE id = $1 LIMIT 1
`

// Trips
func (q *Queries) GetTrip(ctx context.Context, id int64) (Trip, error) {
	row := q.db.QueryRowContext(ctx, getTrip, id)
	var i Trip
	err := row.Scan(
		&i.ID,
		&i.BookingID,
		&i.TripStatus,
		&i.PickupLocation,
		&i.PickupLat,
		&i.PickupLong,
		&i.DropoffLocation,
		&i.DropoffLat,
		&i.DropoffLong,
		&i.DriverID,
		&i.DriverName,
		&i.DriverMobile,
		&i.CarID,
		&i.CarType,
		&i.CarImage,
		&i.Fare,
		&i.CreatedAt,
	)
	return i, err
}

const listTrips = `-- name: ListTrips :many
SELECT id, booking_id, trip_status, pickup_location, pickup_lat, pickup_long, dropoff_location, dropoff_lat, dropoff_long, driver_id, driver_name, driver_mobile, car_id, car_type, car_image, fare, created_at FROM trips ORDER BY id DESC
`

func (q *Queries) ListTrips(ctx context.Context) ([]Trip, error) {
	rows, err := q.db.QueryContext(ctx, listTrips)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Trip
	for rows.Next() {
		var i Trip
		if err := rows.Scan(
			&i.ID,
			&i.BookingID,
			&i.TripStatus,
			&i.PickupLocation,
			&i.PickupLat,
			&i.PickupLong,
			&i.DropoffLocation,
			&i.DropoffLat,
			&i.DropoffLong,
			&i.DriverID,
			&i.DriverName,
			&i.DriverMobile,
			&i.CarID,
			&i.CarType,
			&i.CarImage,
			&i.Fare,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTripStatus = `-- name: UpdateTripStatus :exec
UPDATE trips
SET trip_status = $2
WHERE id = $1
`

type UpdateTripStatusParams struct {
	ID         int64  `json:"id"`
	TripStatus string `json:"trip_status"`
}

func (q *Queries) UpdateTripStatus(ctx context.Context, arg UpdateTripStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateTripStatus, arg.ID, arg.TripStatus)
	return err
}
