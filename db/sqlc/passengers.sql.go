// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: passengers.sql

package db

import (
	"context"
)

const createPassenger = `-- name: CreatePassenger :one
INSERT INTO passengers (
  hashed_password, full_name, email, rating
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, hashed_password, full_name, email, rating, password_changed_at, created_at
`

type CreatePassengerParams struct {
	HashedPassword string `json:"hashed_password"`
	FullName       string `json:"full_name"`
	Email          string `json:"email"`
	Rating         int32  `json:"rating"`
}

func (q *Queries) CreatePassenger(ctx context.Context, arg CreatePassengerParams) (Passenger, error) {
	row := q.db.QueryRowContext(ctx, createPassenger,
		arg.HashedPassword,
		arg.FullName,
		arg.Email,
		arg.Rating,
	)
	var i Passenger
	err := row.Scan(
		&i.ID,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.Rating,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const deletePassenger = `-- name: DeletePassenger :exec
DELETE FROM passengers WHERE id = $1
`

func (q *Queries) DeletePassenger(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePassenger, id)
	return err
}

const getPassenger = `-- name: GetPassenger :one
SELECT id, hashed_password, full_name, email, rating, password_changed_at, created_at FROM passengers WHERE id = $1 LIMIT 1
`

// Passengers
func (q *Queries) GetPassenger(ctx context.Context, id int64) (Passenger, error) {
	row := q.db.QueryRowContext(ctx, getPassenger, id)
	var i Passenger
	err := row.Scan(
		&i.ID,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.Rating,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const listPassengers = `-- name: ListPassengers :many
SELECT id, hashed_password, full_name, email, rating, password_changed_at, created_at FROM passengers ORDER BY full_name
`

func (q *Queries) ListPassengers(ctx context.Context) ([]Passenger, error) {
	rows, err := q.db.QueryContext(ctx, listPassengers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Passenger
	for rows.Next() {
		var i Passenger
		if err := rows.Scan(
			&i.ID,
			&i.HashedPassword,
			&i.FullName,
			&i.Email,
			&i.Rating,
			&i.PasswordChangedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePassenger = `-- name: UpdatePassenger :exec
UPDATE passengers
SET hashed_password = $2,
    full_name = $3,
    email = $4,
    rating = $5
WHERE id = $1
`

type UpdatePassengerParams struct {
	ID             int64  `json:"id"`
	HashedPassword string `json:"hashed_password"`
	FullName       string `json:"full_name"`
	Email          string `json:"email"`
	Rating         int32  `json:"rating"`
}

func (q *Queries) UpdatePassenger(ctx context.Context, arg UpdatePassengerParams) error {
	_, err := q.db.ExecContext(ctx, updatePassenger,
		arg.ID,
		arg.HashedPassword,
		arg.FullName,
		arg.Email,
		arg.Rating,
	)
	return err
}
