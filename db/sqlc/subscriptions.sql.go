// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: subscriptions.sql

package db

import (
	"context"
)

const createSubscription = `-- name: CreateSubscription :one
INSERT INTO subscriptions (
  subscription_package, subscription_amount, subscription_validity, status
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, subscription_package, subscription_amount, subscription_validity, status
`

type CreateSubscriptionParams struct {
	SubscriptionPackage  string `json:"subscription_package"`
	SubscriptionAmount   string `json:"subscription_amount"`
	SubscriptionValidity int32  `json:"subscription_validity"`
	Status               bool   `json:"status"`
}

func (q *Queries) CreateSubscription(ctx context.Context, arg CreateSubscriptionParams) (Subscription, error) {
	row := q.db.QueryRowContext(ctx, createSubscription,
		arg.SubscriptionPackage,
		arg.SubscriptionAmount,
		arg.SubscriptionValidity,
		arg.Status,
	)
	var i Subscription
	err := row.Scan(
		&i.ID,
		&i.SubscriptionPackage,
		&i.SubscriptionAmount,
		&i.SubscriptionValidity,
		&i.Status,
	)
	return i, err
}

const deleteSubscription = `-- name: DeleteSubscription :exec
DELETE FROM subscriptions WHERE id = $1
`

func (q *Queries) DeleteSubscription(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteSubscription, id)
	return err
}

const getSubscription = `-- name: GetSubscription :one
SELECT id, subscription_package, subscription_amount, subscription_validity, status FROM subscriptions WHERE id = $1 LIMIT 1
`

// Subscriptions
func (q *Queries) GetSubscription(ctx context.Context, id int64) (Subscription, error) {
	row := q.db.QueryRowContext(ctx, getSubscription, id)
	var i Subscription
	err := row.Scan(
		&i.ID,
		&i.SubscriptionPackage,
		&i.SubscriptionAmount,
		&i.SubscriptionValidity,
		&i.Status,
	)
	return i, err
}

const listSubscriptions = `-- name: ListSubscriptions :many
SELECT id, subscription_package, subscription_amount, subscription_validity, status FROM subscriptions ORDER BY id
`

func (q *Queries) ListSubscriptions(ctx context.Context) ([]Subscription, error) {
	rows, err := q.db.QueryContext(ctx, listSubscriptions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Subscription
	for rows.Next() {
		var i Subscription
		if err := rows.Scan(
			&i.ID,
			&i.SubscriptionPackage,
			&i.SubscriptionAmount,
			&i.SubscriptionValidity,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSubscription = `-- name: UpdateSubscription :exec
UPDATE subscriptions
SET subscription_package = $2,
    subscription_amount = $3,
    subscription_validity = $4,
    status = $5
WHERE id = $1
`

type UpdateSubscriptionParams struct {
	ID                   int64  `json:"id"`
	SubscriptionPackage  string `json:"subscription_package"`
	SubscriptionAmount   string `json:"subscription_amount"`
	SubscriptionValidity int32  `json:"subscription_validity"`
	Status               bool   `json:"status"`
}

func (q *Queries) UpdateSubscription(ctx context.Context, arg UpdateSubscriptionParams) error {
	_, err := q.db.ExecContext(ctx, updateSubscription,
		arg.ID,
		arg.SubscriptionPackage,
		arg.SubscriptionAmount,
		arg.SubscriptionValidity,
		arg.Status,
	)
	return err
}
