// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: drivers.sql

package db

import (
	"context"
)

const createDriver = `-- name: CreateDriver :one
INSERT INTO drivers (
  hashed_password, full_name, driving_license, mobile, car_id, car_type, car_image, online_status, rating, profile_status, subscription_status, subscription_package, subscription_amount, subscription_validity
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14
)
RETURNING id, hashed_password, full_name, driving_license, mobile, car_id, car_type, car_image, online_status, rating, profile_status, subscription_status, subscription_package, subscription_amount, subscription_validity, subscription_expire_at, password_changed_at, created_at
`

type CreateDriverParams struct {
	HashedPassword       string  `json:"hashed_password"`
	FullName             string  `json:"full_name"`
	DrivingLicense       string  `json:"driving_license"`
	Mobile               string  `json:"mobile"`
	CarID                int64   `json:"car_id"`
	CarType              string  `json:"car_type"`
	CarImage             string  `json:"car_image"`
	OnlineStatus         bool    `json:"online_status"`
	Rating               float64 `json:"rating"`
	ProfileStatus        int32   `json:"profile_status"`
	SubscriptionStatus   bool    `json:"subscription_status"`
	SubscriptionPackage  string  `json:"subscription_package"`
	SubscriptionAmount   string  `json:"subscription_amount"`
	SubscriptionValidity int32   `json:"subscription_validity"`
}

func (q *Queries) CreateDriver(ctx context.Context, arg CreateDriverParams) (Driver, error) {
	row := q.db.QueryRowContext(ctx, createDriver,
		arg.HashedPassword,
		arg.FullName,
		arg.DrivingLicense,
		arg.Mobile,
		arg.CarID,
		arg.CarType,
		arg.CarImage,
		arg.OnlineStatus,
		arg.Rating,
		arg.ProfileStatus,
		arg.SubscriptionStatus,
		arg.SubscriptionPackage,
		arg.SubscriptionAmount,
		arg.SubscriptionValidity,
	)
	var i Driver
	err := row.Scan(
		&i.ID,
		&i.HashedPassword,
		&i.FullName,
		&i.DrivingLicense,
		&i.Mobile,
		&i.CarID,
		&i.CarType,
		&i.CarImage,
		&i.OnlineStatus,
		&i.Rating,
		&i.ProfileStatus,
		&i.SubscriptionStatus,
		&i.SubscriptionPackage,
		&i.SubscriptionAmount,
		&i.SubscriptionValidity,
		&i.SubscriptionExpireAt,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteDriver = `-- name: DeleteDriver :exec
DELETE FROM drivers WHERE id = $1
`

func (q *Queries) DeleteDriver(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteDriver, id)
	return err
}

const getDriver = `-- name: GetDriver :one
SELECT id, hashed_password, full_name, driving_license, mobile, car_id, car_type, car_image, online_status, rating, profile_status, subscription_status, subscription_package, subscription_amount, subscription_validity, subscription_expire_at, password_changed_at, created_at FROM drivers WHERE id = $1 LIMIT 1
`

// Drivers
func (q *Queries) GetDriver(ctx context.Context, id int64) (Driver, error) {
	row := q.db.QueryRowContext(ctx, getDriver, id)
	var i Driver
	err := row.Scan(
		&i.ID,
		&i.HashedPassword,
		&i.FullName,
		&i.DrivingLicense,
		&i.Mobile,
		&i.CarID,
		&i.CarType,
		&i.CarImage,
		&i.OnlineStatus,
		&i.Rating,
		&i.ProfileStatus,
		&i.SubscriptionStatus,
		&i.SubscriptionPackage,
		&i.SubscriptionAmount,
		&i.SubscriptionValidity,
		&i.SubscriptionExpireAt,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getDriverByMobile = `-- name: GetDriverByMobile :one
SELECT id, hashed_password, full_name, driving_license, mobile, car_id, car_type, car_image, online_status, rating, profile_status, subscription_status, subscription_package, subscription_amount, subscription_validity, subscription_expire_at, password_changed_at, created_at FROM drivers WHERE mobile = $1 LIMIT 1
`

func (q *Queries) GetDriverByMobile(ctx context.Context, mobile string) (Driver, error) {
	row := q.db.QueryRowContext(ctx, getDriverByMobile, mobile)
	var i Driver
	err := row.Scan(
		&i.ID,
		&i.HashedPassword,
		&i.FullName,
		&i.DrivingLicense,
		&i.Mobile,
		&i.CarID,
		&i.CarType,
		&i.CarImage,
		&i.OnlineStatus,
		&i.Rating,
		&i.ProfileStatus,
		&i.SubscriptionStatus,
		&i.SubscriptionPackage,
		&i.SubscriptionAmount,
		&i.SubscriptionValidity,
		&i.SubscriptionExpireAt,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const listDrivers = `-- name: ListDrivers :many
SELECT id, hashed_password, full_name, driving_license, mobile, car_id, car_type, car_image, online_status, rating, profile_status, subscription_status, subscription_package, subscription_amount, subscription_validity, subscription_expire_at, password_changed_at, created_at FROM drivers ORDER BY full_name
`

func (q *Queries) ListDrivers(ctx context.Context) ([]Driver, error) {
	rows, err := q.db.QueryContext(ctx, listDrivers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Driver
	for rows.Next() {
		var i Driver
		if err := rows.Scan(
			&i.ID,
			&i.HashedPassword,
			&i.FullName,
			&i.DrivingLicense,
			&i.Mobile,
			&i.CarID,
			&i.CarType,
			&i.CarImage,
			&i.OnlineStatus,
			&i.Rating,
			&i.ProfileStatus,
			&i.SubscriptionStatus,
			&i.SubscriptionPackage,
			&i.SubscriptionAmount,
			&i.SubscriptionValidity,
			&i.SubscriptionExpireAt,
			&i.PasswordChangedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDriver = `-- name: UpdateDriver :exec
UPDATE drivers
SET hashed_password = $2,
    full_name = $3,
    driving_license = $4,
    mobile = $5,
    car_id = $6,
    car_type = $7,
    car_image = $8,
    online_status = $9,
    rating = $10,
    profile_status = $11,
    subscription_status = $12,
    subscription_package = $13,
    subscription_amount = $14,
    subscription_validity = $15
WHERE id = $1
`

type UpdateDriverParams struct {
	ID                   int64   `json:"id"`
	HashedPassword       string  `json:"hashed_password"`
	FullName             string  `json:"full_name"`
	DrivingLicense       string  `json:"driving_license"`
	Mobile               string  `json:"mobile"`
	CarID                int64   `json:"car_id"`
	CarType              string  `json:"car_type"`
	CarImage             string  `json:"car_image"`
	OnlineStatus         bool    `json:"online_status"`
	Rating               float64 `json:"rating"`
	ProfileStatus        int32   `json:"profile_status"`
	SubscriptionStatus   bool    `json:"subscription_status"`
	SubscriptionPackage  string  `json:"subscription_package"`
	SubscriptionAmount   string  `json:"subscription_amount"`
	SubscriptionValidity int32   `json:"subscription_validity"`
}

func (q *Queries) UpdateDriver(ctx context.Context, arg UpdateDriverParams) error {
	_, err := q.db.ExecContext(ctx, updateDriver,
		arg.ID,
		arg.HashedPassword,
		arg.FullName,
		arg.DrivingLicense,
		arg.Mobile,
		arg.CarID,
		arg.CarType,
		arg.CarImage,
		arg.OnlineStatus,
		arg.Rating,
		arg.ProfileStatus,
		arg.SubscriptionStatus,
		arg.SubscriptionPackage,
		arg.SubscriptionAmount,
		arg.SubscriptionValidity,
	)
	return err
}
